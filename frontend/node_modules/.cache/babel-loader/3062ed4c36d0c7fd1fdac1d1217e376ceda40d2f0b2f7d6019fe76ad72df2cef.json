{"ast":null,"code":"var _jsxFileName = \"F:\\\\Intern years 2\\\\Food-Order\\\\Ordering-Foods\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { apiService } from '../service/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // ✅ Xử lý login qua Google redirect\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlToken = urlParams.get(\"token\");\n    const urlTableId = urlParams.get(\"tableId\");\n    const processGoogleLogin = async () => {\n      if (urlToken) {\n        try {\n          const res = await fetch(\"http://localhost:4000/api/profile\", {\n            headers: {\n              Authorization: `Bearer ${urlToken}`\n            }\n          });\n          if (!res.ok) throw new Error(\"Lỗi khi lấy profile từ token\");\n          const userData = await res.json();\n\n          // ✅ Lưu token + user\n          login(urlToken, userData);\n          if (urlTableId) {\n            localStorage.setItem(\"tableId\", urlTableId);\n            navigate(`/menu/${urlTableId}`);\n          } else {\n            navigate(\"/\"); // fallback nếu không có tableId\n          }\n\n          // ✅ Xóa token & tableId khỏi URL (làm sạch)\n          const cleanURL = window.location.origin + window.location.pathname;\n          window.history.replaceState({}, document.title, cleanURL);\n        } catch (error) {\n          console.error(\"Google login failed:\", error);\n          logout();\n          navigate(\"/login\");\n        }\n      } else {\n        setLoading(false); // Không có token → không phải login từ Google\n      }\n    };\n    processGoogleLogin();\n  }, [navigate]);\n\n  // ✅ Validate token nếu đã có\n  useEffect(() => {\n    const validateToken = async () => {\n      if (token) {\n        try {\n          const res = await apiService.getProfile();\n          setUser(res.data);\n        } catch (error) {\n          console.error(\"Invalid token:\", error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n    validateToken();\n  }, [token]);\n  const login = (newToken, userData) => {\n    localStorage.setItem(\"token\", newToken);\n    localStorage.setItem(\"user\", JSON.stringify(userData));\n    setToken(newToken);\n    setUser(userData);\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"tableId\");\n    setToken(null);\n    setUser(null);\n  };\n  const authContextValue = {\n    token,\n    user,\n    loading,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"DF6LDVrJ1XsgaSW7OIYwbu0C/2M=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","apiService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","navigate","urlParams","URLSearchParams","window","location","search","urlToken","get","urlTableId","processGoogleLogin","res","fetch","headers","Authorization","ok","Error","userData","json","login","setItem","cleanURL","origin","pathname","history","replaceState","document","title","error","console","logout","validateToken","getProfile","data","newToken","JSON","stringify","removeItem","authContextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Intern years 2/Food-Order/Ordering-Foods/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { apiService } from '../service/apiService';\r\n\r\nexport const AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  // ✅ Xử lý login qua Google redirect\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const urlToken = urlParams.get(\"token\");\r\n    const urlTableId = urlParams.get(\"tableId\");\r\n\r\n    const processGoogleLogin = async () => {\r\n      if (urlToken) {\r\n        try {\r\n          const res = await fetch(\"http://localhost:4000/api/profile\", {\r\n            headers: { Authorization: `Bearer ${urlToken}` },\r\n          });\r\n\r\n          if (!res.ok) throw new Error(\"Lỗi khi lấy profile từ token\");\r\n\r\n          const userData = await res.json();\r\n\r\n          // ✅ Lưu token + user\r\n          login(urlToken, userData);\r\n\r\n          if (urlTableId) {\r\n            localStorage.setItem(\"tableId\", urlTableId);\r\n            navigate(`/menu/${urlTableId}`);\r\n          } else {\r\n            navigate(\"/\"); // fallback nếu không có tableId\r\n          }\r\n\r\n          // ✅ Xóa token & tableId khỏi URL (làm sạch)\r\n          const cleanURL = window.location.origin + window.location.pathname;\r\n          window.history.replaceState({}, document.title, cleanURL);\r\n        } catch (error) {\r\n          console.error(\"Google login failed:\", error);\r\n          logout();\r\n          navigate(\"/login\");\r\n        }\r\n      } else {\r\n        setLoading(false); // Không có token → không phải login từ Google\r\n      }\r\n    };\r\n\r\n    processGoogleLogin();\r\n  }, [navigate]);\r\n\r\n  // ✅ Validate token nếu đã có\r\n  useEffect(() => {\r\n    const validateToken = async () => {\r\n      if (token) {\r\n        try {\r\n          const res = await apiService.getProfile();\r\n          setUser(res.data);\r\n        } catch (error) {\r\n          console.error(\"Invalid token:\", error);\r\n          logout();\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n    validateToken();\r\n  }, [token]);\r\n\r\n  const login = (newToken, userData) => {\r\n    localStorage.setItem(\"token\", newToken);\r\n    localStorage.setItem(\"user\", JSON.stringify(userData));\r\n    setToken(newToken);\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"tableId\");\r\n    setToken(null);\r\n    setUser(null);\r\n  };\r\n\r\n  const authContextValue = {\r\n    token,\r\n    user,\r\n    loading,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContextValue}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}