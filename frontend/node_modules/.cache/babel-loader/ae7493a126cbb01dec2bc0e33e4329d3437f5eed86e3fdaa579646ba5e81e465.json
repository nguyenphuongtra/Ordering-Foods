{"ast":null,"code":"var _jsxFileName = \"F:\\\\Intern years 2\\\\Food-Order\\\\Ordering-Foods\\\\frontend\\\\src\\\\contexts\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { apiService } from '../service/apiService';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nconst CartProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [cartItems, setCartItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Fetch cart from server when user logs in or changes\n  useEffect(() => {\n    const fetchCart = async () => {\n      if (!user) {\n        setCartItems([]);\n        return;\n      }\n      setIsLoading(true);\n      try {\n        const res = await apiService.getCart(user.id);\n        // assuming res.data.cart is array of items\n        setCartItems(res.data.cart || []);\n      } catch (err) {\n        console.error('Error fetching cart:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCart();\n  }, [user]);\n  const syncCart = async items => {\n    if (!user) return;\n    try {\n      await apiService.updateCart({\n        userId: user.id,\n        items\n      });\n    } catch (err) {\n      console.error('Error syncing cart to server:', err);\n    }\n  };\n  const addToCart = async food => {\n    if (!user) return;\n    setIsLoading(true);\n    try {\n      const existing = cartItems.find(i => i.id === food.id);\n      if (existing) {\n        const updated = cartItems.map(i => i.id === food.id ? {\n          ...i,\n          quantity: i.quantity + 1\n        } : i);\n        setCartItems(updated);\n        await apiService.addToCart({\n          userId: user.id,\n          foodId: food.id,\n          quantity: existing.quantity + 1\n        });\n      } else {\n        setCartItems([...cartItems, {\n          ...food,\n          quantity: 1\n        }]);\n        await apiService.addToCart({\n          userId: user.id,\n          foodId: food.id,\n          quantity: 1\n        });\n      }\n    } catch (err) {\n      console.error('Error adding to cart:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const removeFromCart = async foodId => {\n    if (!user) return;\n    try {\n      setCartItems(prev => prev.filter(item => item.id !== foodId));\n      await apiService.removeFromCart({\n        userId: user.id,\n        foodId\n      });\n    } catch (err) {\n      console.error('Error removing from cart:', err);\n    }\n  };\n  const updateQuantity = async (foodId, newQuantity) => {\n    if (!user) return;\n    setIsLoading(true);\n    try {\n      if (newQuantity <= 0) {\n        await removeFromCart(foodId);\n        return;\n      }\n      const updated = cartItems.map(item => item.id === foodId ? {\n        ...item,\n        quantity: newQuantity\n      } : item);\n      setCartItems(updated);\n      await apiService.updateCart({\n        userId: user.id,\n        foodId,\n        quantity: newQuantity\n      });\n    } catch (err) {\n      console.error('Error updating cart quantity:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const clearCart = async () => {\n    if (!user) return;\n    setIsLoading(true);\n    try {\n      setCartItems([]);\n      await apiService.clearCart(user.id);\n    } catch (err) {\n      console.error('Error clearing cart:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const getTotalPrice = () => cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const getTotalItems = () => cartItems.reduce((sum, item) => sum + item.quantity, 0);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      clearCart,\n      getTotalPrice,\n      getTotalItems,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"EUEZJPgmLaJTiQxztNeXEJseD6U=\");\n_c = CartProvider;\nconst useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) throw new Error('useCart must be used within CartProvider');\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { CartProvider, useCart, CartContext };\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","AuthContext","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","user","cartItems","setCartItems","isLoading","setIsLoading","fetchCart","res","getCart","id","data","cart","err","console","error","syncCart","items","updateCart","userId","addToCart","food","existing","find","i","updated","map","quantity","foodId","removeFromCart","prev","filter","item","updateQuantity","newQuantity","clearCart","getTotalPrice","reduce","sum","price","getTotalItems","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["F:/Intern years 2/Food-Order/Ordering-Foods/frontend/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { apiService } from '../service/apiService';\r\nimport { AuthContext } from './AuthContext';\r\n\r\nconst CartContext = createContext();\r\n\r\nconst CartProvider = ({ children }) => {\r\n  const { user } = useContext(AuthContext);\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Fetch cart from server when user logs in or changes\r\n  useEffect(() => {\r\n    const fetchCart = async () => {\r\n      if (!user) {\r\n        setCartItems([]);\r\n        return;\r\n      }\r\n      setIsLoading(true);\r\n      try {\r\n        const res = await apiService.getCart(user.id);\r\n        // assuming res.data.cart is array of items\r\n        setCartItems(res.data.cart || []);\r\n      } catch (err) {\r\n        console.error('Error fetching cart:', err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchCart();\r\n  }, [user]);\r\n\r\n  const syncCart = async (items) => {\r\n    if (!user) return;\r\n    try {\r\n      await apiService.updateCart({ userId: user.id, items });\r\n    } catch (err) {\r\n      console.error('Error syncing cart to server:', err);\r\n    }\r\n  };\r\n\r\n  const addToCart = async (food) => {\r\n    if (!user) return;\r\n    setIsLoading(true);\r\n    try {\r\n      const existing = cartItems.find(i => i.id === food.id);\r\n      if (existing) {\r\n        const updated = cartItems.map(i =>\r\n          i.id === food.id ? { ...i, quantity: i.quantity + 1 } : i\r\n        );\r\n        setCartItems(updated);\r\n        await apiService.addToCart({ userId: user.id, foodId: food.id, quantity: existing.quantity + 1 });\r\n      } else {\r\n        setCartItems([...cartItems, { ...food, quantity: 1 }]);\r\n        await apiService.addToCart({ userId: user.id, foodId: food.id, quantity: 1 });\r\n      }\r\n    } catch (err) {\r\n      console.error('Error adding to cart:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const removeFromCart = async (foodId) => {\r\n    if (!user) return;\r\n    try {\r\n      setCartItems(prev => prev.filter(item => item.id !== foodId));\r\n      await apiService.removeFromCart({ userId: user.id, foodId });\r\n    } catch (err) {\r\n      console.error('Error removing from cart:', err);\r\n    }\r\n  };\r\n\r\n  const updateQuantity = async (foodId, newQuantity) => {\r\n    if (!user) return;\r\n    setIsLoading(true);\r\n    try {\r\n      if (newQuantity <= 0) {\r\n        await removeFromCart(foodId);\r\n        return;\r\n      }\r\n      const updated = cartItems.map(item =>\r\n        item.id === foodId ? { ...item, quantity: newQuantity } : item\r\n      );\r\n      setCartItems(updated);\r\n      await apiService.updateCart({ userId: user.id, foodId, quantity: newQuantity });\r\n    } catch (err) {\r\n      console.error('Error updating cart quantity:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const clearCart = async () => {\r\n    if (!user) return;\r\n    setIsLoading(true);\r\n    try {\r\n      setCartItems([]);\r\n      await apiService.clearCart(user.id);\r\n    } catch (err) {\r\n      console.error('Error clearing cart:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const getTotalPrice = () =>\r\n    cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n\r\n  const getTotalItems = () =>\r\n    cartItems.reduce((sum, item) => sum + item.quantity, 0);\r\n\r\n  return (\r\n    <CartContext.Provider value={{\r\n      cartItems,\r\n      addToCart,\r\n      removeFromCart,\r\n      updateQuantity,\r\n      clearCart,\r\n      getTotalPrice,\r\n      getTotalItems,\r\n      isLoading\r\n    }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nconst useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) throw new Error('useCart must be used within CartProvider');\r\n  return context;\r\n};\r\n\r\nexport { CartProvider, useCart, CartContext };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}